#!/usr/bin/env python# -*- coding: utf-8 -*-import osimport psycopg2import sysimport pprintimport reimport globimport telnetlibimport getpassimport syssys.path.insert(0, "../papachappa/settings")from env_settings import *REMOTE_RIFA50_DIR = os.getenv('RIFA50_DIR', '/usr/protei/SIP_Phone')class Manipulation(object):    def manipulate(self, *commands):        USER = "root"        PASS = "elephant"        self.tn = telnetlib.Telnet(RIFA50_host, timeout=1)        self.tn.expect([r".*login: "])        self.tn.write(USER + "\r")        self.tn.expect([r".*Password: "])        self.tn.write(PASS + "\r")        self.tn.write("cd %s\r" % RIFA50_DIR)        for arg in commands:            self.tn.write("%s\r\n" % arg)        self.check = self.tn.read_until(".*", timeout=1)        print self.check        self.tn.write("exit\r")    def matching(self, text_to_check):        match = re.findall(text_to_check, self.check)        if len(match) == 3:            print text_to_check        else:            raise AssertionError("Error of file existance or contain string has been rised!")    def check_file_existance(self, filename):        outtext = "File exist!"        command = "if [ -f  %s/%s ]; then echo '%s' ; fi" % (REMOTE_RIFA50_DIR, filename, outtext)        self.manipulate(command)        self.matching(outtext)    def check_file_contain(self, filename, content):        outtext = "File contain that string"        command = "if grep -q %s '%s'; then echo '%s' ; fi" % (content, filename, outtext)        self.manipulate(command)        self.matching(outtext)    def file_replace_string(self, filename, str_to_find, rplce_str):        outtext = "File contain that string"        command = "sed -i -e 's/%s/%s/g' %s" % (str_to_find, rplce_str, filename)        self.manipulate(command)        self.check_file_contain(filename, rplce_str)    def get_list_private_contacts(self, id, first_name, middle_name, last_name, email, gender, private_book_id, description,            deleted):        self.private_list = [id, first_name, middle_name, last_name, email, gender, private_book_id, description,                             deleted]    def postgres_connect(self):        # Define our connection string        self.conn_string = "host='%s' dbname='%s' user='%s'" % (PostgresHost, DataBaseName, DBUser)        # print the connection string we will use to connect        print "Connecting to database\n	->%s" % self.conn_string        try:            self.conn = psycopg2.connect(self.conn_string)        except:            print "Can't connect to database"        self.cursor = self.conn.cursor()        print "Connected!\n"    def postgres_disconnect(self):        self.cursor.close()        self.conn.close()    def postgres_insert_value(self):        # postgres_connect()        self.cursor.execute(                "insert into private_contacts (id, first_name, middle_name, last_name, email, gender, private_book_id, description,"                "deleted) values (%s, %s, %s, %s, %s, %s, %s, %s, %s);", self.private_list)        self.conn.commit()    def postgres_delete_value(self):        # postgres_connect()        self.cursor.execute("DELETE FROM private_contacts WHERE id=11;")        self.conn.commit()    def postgres_select(self):        self.cursor.execute("select * from private_contacts")        records = self.cursor.fetchall()        print "\nRows: \n"        for row in records:            print "   ", row[1]            # pprint.pprint(records)s = Manipulation()# s.manipulate("sh stop.sh", "sh start.sh", "ls -la")# s.check_file_contain(RIFA50_GUI_CONF_FILE, 'AddressBookServerPort')# s.file_replace_string(RIFA50_GENERAL_CONF_FILE, "FOU", "FuncKeysMenasd")s.get_list_private_contacts(11, 'Dom', 'Firt', 'Famularo', 'famularo@gmail.com', 'MALE', 6, 'Cool_Drummer', 'f')s.postgres_connect()s.postgres_insert_value()# s.postgres_delete_value()s.postgres_select()s.postgres_disconnect()